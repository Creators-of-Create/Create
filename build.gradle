plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version "${forgegradle_version}"
    id 'org.parchmentmc.librarian.forgegradle' version "${librarian_version}"
    id 'org.spongepowered.mixin' version "${mixingradle_version}"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id("net.kyori.blossom") version "2.1.0" // https://github.com/KyoriPowered/blossom
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.8" // https://github.com/JetBrains/gradle-idea-ext-plugin
}

jarJar.enable()

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false');

ext.buildNumber = System.getenv('BUILD_NUMBER')

group = 'com.simibubi.create'
archivesBaseName = "create-${artifact_minecraft_version}"
version = mod_version + (dev && buildNumber != null ? "-${buildNumber}" : '')
String gitHash = "\"${calculateGitHash() + (hasUnstaged() ? "-modified" : "")}\""

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

mixin {
    add sourceSets.main, 'create.refmap.json'

    config 'flywheel.backend.mixins.json'
    config 'flywheel.impl.mixins.json'
    config 'flywheel.impl.sodium.mixins.json'
    config 'create.mixins.json'

    debug.verbose = true
    debug.export = true
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {
    if (Boolean.parseBoolean(use_parchment)) {
        mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            property 'forge.logging.markers', ''
            property 'forge.logging.console.level', 'info'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //jvmArgs '-XX:+IgnoreUnrecognizedVMOptions', '-XX:+AllowEnhancedClassRedefinition' // uncomment with jbr

            mods {
                create {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('run/server')
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'create', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
        }

        gameTestServer {
            workingDirectory project.file('run/gametest')
            // setForceExit false <- FIXME 1.20
        }
    }
}

repositories {
    maven {
        // location of the maven for Registrate and Flywheel
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    /*maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }*/
    maven {
        // location of the maven for Dynamic Trees
        url = 'https://harleyoconnor.com/maven'
    }
    maven {
        // location of the maven for Curios API
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // location of maven for CC: Tweaked
        name = "squiddev"
        url = "https://squiddev.cc/maven/"
    }
    maven {
        name = "ftb"
        url = "https://maven.saps.dev/releases"
    }
	maven {
        name = "architectury"
        url = "https://maven.architectury.dev/"
    }
	maven {
        url = "https://jm.gserv.me/repository/maven-public/"
        content {
            includeGroup "info.journeymap"
            includeGroup "mysticdrew"
        }
    }


    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    jarJar("com.tterrag.registrate:Registrate:${registrate_version}") {
        jarJar.ranged(it, '[MC1.19.3-1.1.10,)')
    }
    jarJar("dev.engine_room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}") {
        jarJar.ranged(it, '[1.0,2.0)')
    }

    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compileOnly fg.deobf("dev.engine_room.flywheel:flywheel-forge-api-${flywheel_minecraft_version}:${flywheel_version}")
    runtimeOnly fg.deobf("dev.engine_room.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}+${curios_minecraft_version}")

	if (cc_tweaked_enable.toBoolean()) {
	    compileOnly("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-core-api:${cc_tweaked_version}")
        compileOnly fg.deobf("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-forge-api:${cc_tweaked_version}")
        runtimeOnly fg.deobf("cc.tweaked:cc-tweaked-${cc_tweaked_minecraft_version}-forge:${cc_tweaked_version}")
	}

    if (dynamic_trees_enable.toBoolean()) {
        compileOnly fg.deobf("com.ferreusveritas.dynamictrees:DynamicTrees-${dynamic_trees_minecraft_version}:${dynamic_trees_version}")
    }

    // implementation fg.deobf("curse.maven:ic2-classic-242942:5555152")
    // implementation fg.deobf("curse.maven:druidcraft-340991:3101903")
    // implementation fg.deobf("com.railwayteam.railways:railways-1.19.2-1.6.4:all") { transitive = false }
	
	implementation fg.deobf("dev.architectury:architectury-forge:9.1.12")
	implementation fg.deobf("dev.ftb.mods:ftb-chunks-forge:2001.3.1")
	implementation fg.deobf("dev.ftb.mods:ftb-teams-forge:2001.3.0")
	implementation fg.deobf("dev.ftb.mods:ftb-library-forge:2001.2.4")
	
	implementation fg.deobf("curse.maven:journeymap-32274:5457831")
	// implementation fg.deobf("ignored:journeymap-1.20.1-5.10.1-forge")

    // runtimeOnly fg.deobf("curse.maven:framedblocks-441647:5399211")
    // runtimeOnly fg.deobf("curse.maven:galosphere-631098:4574834")
    // runtimeOnly fg.deobf("curse.maven:elementary-ores-332609:4514276") 1.19.4 only
    // runtimeOnly fg.deobf("curse.maven:flib-661261:4479544")
    // runtimeOnly fg.deobf("curse.maven:infernal-expansion-395078:4002091")
    // runtimeOnly fg.deobf("vazkii.autoreglib:AutoRegLib:1.8.2-58.126")
    // runtimeOnly fg.deobf("curse.maven:quark-243121:4812006")
    // runtimeOnly fg.deobf("curse.maven:mantle-74924:5339977")
    // runtimeOnly fg.deobf("curse.maven:tinkers-construct-74072:5358052")
    // runtimeOnly fg.deobf("maven.modrinth:rubidium:0.6.2c")
    // runtimeOnly fg.deobf("maven.modrinth:aether:1.19.2-1.4.2-forge")
    // runtimeOnly fg.deobf("maven.modrinth:spark:1.10.38-forge")
    // runtimeOnly fg.deobf("curse.maven:forbidden-arcanus-309858:4852521")
    // runtimeOnly fg.deobf("curse.maven:valhelsia-core-416935:4181245")
    // runtimeOnly fg.deobf("curse.maven:modern-ui-352491:5229370")
    // runtimeOnly fg.deobf("curse.maven:sophisticated-storage-619320:5194750")
    // runtimeOnly fg.deobf("curse.maven:sophisticated-core-618298:5296313")
    // runtimeOnly fg.deobf("curse.maven:functional-storage-556861:5499169")
    // runtimeOnly fg.deobf("curse.maven:titanium-287342:5356458")
    // runtimeOnly fg.deobf("curse.maven:storage-drawers-223852:3884263")
    // runtimeOnly fg.deobf("curse.maven:ftb-chunks-forge-314906:5417874")
    // runtimeOnly fg.deobf("curse.maven:architectury-api-419699:5137942")
    // runtimeOnly fg.deobf("curse.maven:ftb-library-forge-404465:4661834")
    // runtimeOnly fg.deobf("curse.maven:ftb-teams-forge-404468:4611938")
    // runtimeOnly fg.deobf("curse.maven:citadel-331936:4556677")
    // runtimeOnly fg.deobf("curse.maven:ice-and-fire-dragons-264231:5037952")
    // runtimeOnly fg.deobf("curse.maven:exnihilosequentia-400012:4993344")
    // runtimeOnly fg.deobf("curse.maven:upgrade-aquatic-326895:4777515")
    // runtimeOnly fg.deobf("curse.maven:blueprint-382216:4749000")
    // runtimeOnly fg.deobf("curse.maven:windsweptmod-636321:4817132")
    // runtimeOnly fg.deobf("curse.maven:good-ending-690161:4363719")

    // https://discord.com/channels/313125603924639766/725850371834118214/910619168821354497
    // Prevent Mixin annotation processor from getting into IntelliJ's annotation processor settings
    // This allows 'Settings > Build, Execution, and Deployment > Build Tools > Gradle > Build and run using' set to IntelliJ to work correctly
    if (!Boolean.getBoolean('idea.sync.active')) {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }
}

sourceSets.main {
    java {
        if (!cc_tweaked_enable.toBoolean()) {
            exclude 'com/simibubi/create/compat/computercraft/implementation/**'
        }
    }
    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }
    blossom.javaSources {
        property("version", build_info_mod_version)
        property("gitCommit", gitHash.toString())
    }
}

// Workaround for SpongePowered/MixinGradle#38
afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

compileJava {
    options.compilerArgs = ['-Xdiags:verbose']
}

java {
    withSourcesJar()
    withJavadocJar()
}

jar {
    archiveClassifier = 'slim'
    manifest {
        attributes([
            'Specification-Title': 'create',
            'Specification-Vendor': 'simibubi',
            'Specification-Version': '1',
            'Implementation-Title': project.jar.archiveBaseName,
            'Implementation-Version': project.jar.archiveVersion,
            'Implementation-Vendor': 'simibubi',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'MixinConfigs': 'create.mixins.json',
            'Git-Hash': gitHash
        ])
    }
}

tasks.named("sourcesJar") {
    manifest {
        attributes(Map.of("Git-Hash", gitHash))
    }
}

task jarJarRelease {
    group = 'jarjar'
    doLast {
        tasks.jarJar {
            archiveClassifier = ''
        }
    }
    finalizedBy tasks.jarJar
}

void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

jar.finalizedBy('reobfJar')
tasks.jarJar.finalizedBy('reobfJarJar')

addLicense(jar)
addLicense(tasks.jarJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            from components.java
            fg.component(it)
            jarJar.component(it)
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

String calculateGitHash() {
    try {
        ByteArrayOutputStream stdout = new ByteArrayOutputStream()
        exec {
            commandLine("git", "rev-parse", "HEAD")
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch(Throwable ignored) {
        return "unknown"
    }
}

boolean hasUnstaged() {
    try {
        ByteArrayOutputStream stdout = new ByteArrayOutputStream()
        exec {
            commandLine("git", "status", "--porcelain")
            standardOutput = stdout
        }
        String result = stdout.toString().replace("/M gradlew(\\.bat)?/", "").trim()
        if (!result.isEmpty())
            println("Found stageable results:\n${result}\n")
        return !result.isEmpty()
    }  catch(Throwable ignored) {
        return false
    }
}
