plugins {
    id 'dev.architectury.loom' version "${loom_version}"
    id 'com.matthewprenger.cursegradle' version "${cursegradle_version}"
    id 'maven-publish'
}

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE').equals('false')
// jozu: I use a gradle workspace with both projects.
// The project is named Flywheel-Forge, but sub-projects are named by folder.
boolean inWorkspace = findProject(':Flywheel') != null

ext.buildNumber = System.getenv('BUILD_NUMBER')

group = 'com.simibubi.create'
archivesBaseName = "create-${artifact_minecraft_version}"
version = mod_version + (dev && buildNumber != null ? "-${buildNumber}" : '')

loom {
    silentMojangMappingsLicense()

    forge {
        mixinConfig "create.mixins.json"
    }

    mixin {
        defaultRefmapName = "create.refmap.json"
    }

    mods {
        create {
            sourceSet sourceSets.main
            if(inWorkspace) {
                sourceSet project(":Flywheel").sourceSets.main
            }
        }
    }

    runs {
        client {
            client()
            //vmArg '-XX:+UnlockCommercialFeatures' // uncomment for profiling
            runDir 'run'
            ideConfigGenerated true
        }

        server {
            server()
            project.file('run/server').absolutePath
            ideConfigGenerated true
            runDir 'run/server'
        }

        data {
            data()
            programArgs '--mod', 'create'
            programArg '--all'
            programArgs '--output', file('src/generated/resources/').absolutePath
            programArgs '--existing', file('src/main/resources/').absolutePath
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        gameTest {
            runDir = project.file('run/gametest').absolutePath
            inherit server
            configName = 'Server Game Tests'
        }
    }
}

repositories {
    mavenLocal()
    maven {
        // location of the maven for Parchment mappings
        url 'https://maven.parchmentmc.org'
    }
        maven {
        // location of the maven for Registrate and Flywheel
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com'
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        // location of the maven for Vazkii's mods
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    maven {
        // location of the maven for Dynamic Trees
        url = 'https://harleyoconnor.com/maven'
    }

    maven {
        // location of the maven for Curios API
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        // location of maven for CC: Tweaked
        name = "squiddev"
        url = "https://squiddev.cc/maven/"
        content {
            includeGroup "org.squiddev"
        }
    }

    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    mappings(loom.layered {
        if(Boolean.parseBoolean(project.use_parchment)) {
            it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        }
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    include modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")

    if (inWorkspace) {
        implementation project(path: ':Flywheel', configuration: 'namedElements')
    } else {
        modImplementation "com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}"
    }

    include "com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}"

    modCompileOnly "mezz.jei:jei-${jei_minecraft_version}:${jei_version}:api"
    modLocalRuntime "mezz.jei:jei-${jei_minecraft_version}:${jei_version}"

    modCompileOnly "top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}:api"
    modLocalRuntime "top.theillusivec4.curios:curios-forge:${curios_minecraft_version}-${curios_version}"

    if (cc_tweaked_enable.toBoolean()) {
        modCompileOnly "org.squiddev:cc-tweaked-${cc_tweaked_minecraft_version}:${cc_tweaked_version}:api"
        modLocalRuntime "org.squiddev:cc-tweaked-${cc_tweaked_minecraft_version}:${cc_tweaked_version}"
    }
}

sourceSets.main {
    java {
        if (!cc_tweaked_enable.toBoolean()) {
            exclude 'com/simibubi/create/compat/computercraft/implementation/**'
        }
    }

    resources {
        srcDir 'src/generated/resources'
        exclude '.cache/'
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    options.release.set 17
    options.compilerArgs += ['-Xdiags:verbose']
}

java {
    withSourcesJar()
    withJavadocJar()
}

remapJar {
    archiveClassifier = 'all'
}

tasks.register('slimJar', net.fabricmc.loom.task.RemapJarTask) {
    dependsOn 'jar'
    group = 'build'

    input = jar.archiveFile
    archiveClassifier = 'slim'
    addNestedDependencies = false
}

tasks.register('releaseJar') {
    group = 'build'
    doLast {
        remapJar {
            archiveClassifier = ''
        }
    }
    finalizedBy remapJar
}

jar {
    manifest {
        attributes([
                'Specification-Title': 'create',
                'Specification-Vendor': 'simibubi',
                'Specification-Version': '1',
                'Implementation-Title': archivesBaseName,
                'Implementation-Version': version,
                'Implementation-Vendor': 'simibubi',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'create.mixins.json'
        ])
    }
}

void addLicense(jarTask) {
    jarTask.from('LICENSE') {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

addLicense(jar)
addLicense(remapJar)
addLicense(slimJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName

            from components.java
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url mavendir }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return ''
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "Create ${version}"
                temp = "<span style=\"font-size: 18px; color: #333399;\">Create v${mod_version}</span>&nbsp;&nbsp;<em>for Minecraft ${minecraft_version}</em><br/>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp<br/>"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>")
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>")
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += temp
            lineCount++
        } else {
            str += "<p>Please submit any Issues you come across on the&nbsp;<a href=\"https://github.com/${github_project}/issues\" rel=\"nofollow\">Issue Tracker</a>.</p>"
            done = true
        }
    }
    return str
}

// changelog debugging
// new File("changelog.html").write getChangelogText()
// tasks.curseforge.enabled = !dev && project.hasProperty('simi_curseforge_key')
// curseforge {
//     if (project.hasProperty('simi_curseforge_key')) {
//         apiKey = project.simi_curseforge_key
//     }
//
//     project {
//         id = project.projectId
//         changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
//         changelogType = 'html'
//         releaseType = project.curse_type
//         mainArtifact(shadowJar) {
//             displayName = "Create - ${version}"
//         }
//         relations {
//             optionalDependency 'jei'
//         }
//     }
// }

